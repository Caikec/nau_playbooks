---
# Ansible playbook that deploys NAU.
#
#
# Open edX instance with 3 layers:
# - Load balancer servers
# - Persistence servers (mongo_servers, cache_servers and mysql_servers)
# - Application servers (app_servers & complementary_servers)
#
# NAU also has other services like:
# - richie for marketing site
# - static proxy service
# - fam servers that print course certificate to PDF
#
# Examples:
#   To deploy the application servers and deploy 2 servers at once run:
#     ansible-playbook -i nau-data/envs/<env>/hosts.ini deploy.yml --limit app_servers -e serial_number=2
#
#   To deploy the application servers and migrate the database changes
#     ansible-playbook -i nau-data/envs/<env>/hosts.ini deploy.yml --limit app_servers -e "migrate_db=yes"
#
#   To deploy the application servers with a specific themes version
#     ansible-playbook -i nau-data/envs/<env>/hosts.ini deploy.yml --limit app_servers -e "THEMES_VERSION=master"
#
#   To deploy the complementary servers and its services run:
#     ansible-playbook -i nau-data/envs/<env>/hosts.ini deploy.yml --limit complementary_servers
#
#   To deploy the load balancers run:
#     ansible-playbook -i nau-data/envs/<env>/hosts.ini deploy.yml --limit balancer_servers
#
#   To deploy static servers run:
#     ansible-playbook -i nau-data/envs/<env>/hosts.ini deploy.yml --limit statics_servers
#
#   To deploy IdP proxy servers run:
#     ansible-playbook -i nau-data/:nvs/<env>/hosts.ini deploy.yml --limit idpproxy_servers
#
#   To deploy IdP Auth servers run:
#     ansible-playbook -i nau-data/envs/<env>/hosts.ini deploy.yml --limit idpauth_servers
##
#   To mark a server for maintenance, like load balancer or mysql server, append to the shell command arguments:
#     ansible-playbook -i nau-data/envs/<env>/hosts.ini deploy.yml --tags keepalived --limit slave_persistence_servers -e keepalived_priority=1
#   To mark a server back to normal state, run the same command without the --limit.
#
#   To update the OpenedX MySQL database grants run:
#     ansible-playbook -i nau-data/envs/<env>/hosts.ini deploy.yml -e openedx_mysql_initialization=true --limit nau_docker_swarm_servers --tags docker_mysql_replication_additional_users
#
#   To deploy the openedx docker stack
#     ansible-playbook -i nau-data/envs/<env>/hosts.ini deploy.yml --limit nau_docker_swarm_managers -e openedx_deploy=true
#
#   To deploy the static proxy docker stack
#     ansible-playbook -i nau-data/envs/<env>/hosts.ini deploy.yml --limit nau_docker_swarm_managers -e staticproxy_deploy=true
#
#   To deploy the coursecertificate docker stack
#     ansible-playbook -i nau-data/envs/<env>/hosts.ini deploy.yml --limit nau_docker_swarm_managers -e coursecertificate_deploy=true
#
#   To deploy the richie stack
#     ansible-playbook -i nau-data/envs/<env>/hosts.ini deploy.yml --limit nau_docker_swarm_servers -e richie_deploy=true
- name: Bootstrap instances of 16.04
  hosts: all,!idpproxy_servers,!idpauth_servers,!nau_docker_swarm_managers,!nau_docker_swarm_workers,!support_server
  gather_facts: no
  become: true
  tasks:
    - import_role:
        name: python_minimal
      when: ansible_python_interpreter is not defined

- name: Bootstrap instances of 20.04
  hosts: nau_docker_swarm_managers,nau_docker_swarm_workers,command_and_control_2004
  gather_facts: no
  become: true
  tasks:
    - name: Install pip
      import_role:
        name: geerlingguy.pip
    
    # https://github.com/georchestra/ansible/issues/55
    - name: On Ubuntu 20.04 or later, you need to install the acl package to becoming non privileged user.
      package:
        name: acl

- name: Bootstrap cnc with Ubuntu 20.04
  hosts: command_and_control_2004
  become: True
  gather_facts: True
  tasks:
    # to run openedx-lms-db-export.yml playbook that runs a script on the a docker container
    - name: Install docker
      import_role:
        name: geerlingguy.docker
    - name: Install docker daemon config
      import_role:
        name: docker_daemon
    # to run jenkins slave on the node
    - name: Install Java
      import_role:
        name: geerlingguy.java
    - name: Install virtualenv pip package
      pip:
        name: virtualenv
    - name: Install package python3.8-venv
      package:
        name: python3.8-venv

- name: Infrastructure configuration
  hosts: all
  become: True
  gather_facts: True
  roles:
    - role: users
    - role: ssh_authorized_keys
    - role: ansible_pakiti_client

- name: Configure hosts file
  hosts: all,!srv_local,!support_server,!command_and_control
  become: True
  gather_facts: True
  # vars defined on 02_hosts.yml
  roles: 
    - bertvv.hosts
  tags: hosts

- name: Configure load balancer docker
  # Deploy before on backup balancer, so if there is an error during the ansible deployment the primary continue to serve
  hosts: balancer_servers
  serial: "{{ serial_number | default(1) }}"
  become: True
  gather_facts: True
  roles:
    - role: keepalived
      vars: 
        keepalived_priority_value: 1 # Lower priority so the VIPs can swap to other machine.
      when: vrrp_instances is defined
    - role: geerlingguy.docker
    - role: ansible-firewall
    - role: docker_daemon
    - role: ansible-docker-deploy
    - role: haproxy-netsnmp-perl
    - role: snmpd
    - role: nau_check_urls
    - role: keepalived
      vars:
        keepalived_priority_value: "{{ keepalived_priority }}"
      when: vrrp_instances is defined
  tags: load-balancer

- name: Configure statics servers docker
  hosts: statics_servers
  serial: "{{ serial_number | default(1) }}"
  become: True
  gather_facts: True
  roles:
    - role: rolling_deploy
      vars:
        rolling_deploy_starting: true
      when: ( groups['statics_servers'] | length ) > 1
    - role: geerlingguy.docker
    - role: docker_daemon
    - role: ansible-docker-deploy
    - role: web_server_monitoring
    - role: snmpd
    - role: nau_check_urls
    - role: rolling_deploy
      vars:
        rolling_deploy_starting: false
      when: ( groups['statics_servers'] | length ) > 1

- name: Configure mysql server instance
  hosts: mysql_servers
  become: True
  gather_facts: True
  roles:
    - role: remove_edx_apt_ppa_repo
    - role: swapfile
    - role: data_dirs
    - role: edxlocal
    - role: oraclejdk
    - role: persistence_db
      vars:
        install_memcache: false
    - role: mysql_replication
    - role: keepalived
      when: vrrp_instances is defined

- name: Configure mongo server instance
  hosts: mongo_servers
  become: True
  gather_facts: True
  roles:
    - role: swapfile
    - role: data_dirs
    - role: mongo_3_2
    - role: oraclejdk
    - role: elasticsearch
    - role: es_kopf

- name: Configure cache server instance
  hosts: cache_servers
  become: True
  gather_facts: True
  roles:
    - role: memcache
    - role: rabbitmq
    - role: oraclejdk
    - role: persistence_db
      vars:
        install_mysql: false

- name: Configure the application server group
  hosts: app_servers
  serial: "{{ serial_number | default(1) }}"
  become: True
  gather_facts: True
  roles:
    - role: rolling_deploy
      vars:
        rolling_deploy_starting: true
      when: ( groups['app_servers'] | length ) > 1
    - role: remove_edx_apt_ppa_repo
    - role: swapfile
    - role: server_files # copy additional ssl certificates
    - role: nginx
      nginx_sites:
      - cms
      - lms
      - forum
      - nau_nginx_status
      nginx_default_sites:
      - lms
    - role: nginx_default_static_site
      when: use_nginx_default_site
    - role: edxapp
      celery_worker: True
    - edxapp
    - forum
    - role: postfix_queue
      when: POSTFIX_QUEUE_EXTERNAL_SMTP_HOST is defined and POSTFIX_QUEUE_EXTERNAL_SMTP_HOST != ""
    - role: logrotate_overrides
      when: COMMON_COMPLEMENTARY_APPLICATION_ROLES is defined and 'aws' in COMMON_COMPLEMENTARY_APPLICATION_ROLES
    - role: web_server_monitoring
    - role: snmpd
    - role: nau_check_urls
    - role: rolling_deploy
      vars:
        rolling_deploy_starting: false
      when: ( groups['app_servers'] | length ) > 1

- name: Configure the complementary server group
  hosts: complementary_servers
  serial: "{{ serial_number | default(1) }}"
  become: True
  gather_facts: True
  roles:
    - role: rolling_deploy
      vars:
        rolling_deploy_starting: true
      when: ( groups['complementary_servers'] | length ) > 1
    - role: remove_edx_apt_ppa_repo
    - role: swapfile
    - role: nginx
      nginx_sites:
      - insights
      - edx_notes_api
      - nau_nginx_status
    - role: nginx_default_static_site
      when: use_nginx_default_site
    - role: discovery
      when: COMMON_COMPLEMENTARY_APPLICATION_ROLES is defined and 'discovery' in COMMON_COMPLEMENTARY_APPLICATION_ROLES
    - role: ecommerce
      when: COMMON_COMPLEMENTARY_APPLICATION_ROLES is defined and 'ecommerce' in COMMON_COMPLEMENTARY_APPLICATION_ROLES
    - role: ecomworker
      when: COMMON_COMPLEMENTARY_APPLICATION_ROLES is defined and 'ecommerce' in COMMON_COMPLEMENTARY_APPLICATION_ROLES
    - role: edx_notes_api
      when: COMMON_COMPLEMENTARY_APPLICATION_ROLES is defined and 'edx_notes_api' in COMMON_COMPLEMENTARY_APPLICATION_ROLES
    - role: analytics_api
      when: COMMON_COMPLEMENTARY_APPLICATION_ROLES is defined and 'analytics_api' in COMMON_COMPLEMENTARY_APPLICATION_ROLES
    - role: insights
      when: COMMON_COMPLEMENTARY_APPLICATION_ROLES is defined and 'insights' in COMMON_COMPLEMENTARY_APPLICATION_ROLES
    - role: mfe_deployer
      when: COMMON_COMPLEMENTARY_APPLICATION_ROLES is defined and 'mfe' in COMMON_COMPLEMENTARY_APPLICATION_ROLES
    - role: web_server_monitoring
    - role: snmpd
    - role: nau_check_urls
    - role: rolling_deploy
      vars:
        rolling_deploy_starting: false
      when: ( groups['complementary_servers'] | length ) > 1

- name: Configure pipeline servers
  hosts: pipeline_servers
  become: True
  gather_facts: True
  vars:
    ANALYTICS_API_SERVICE_CONFIG: "When defined, we create the analytics-api users at the db"
  roles:
    - role: remove_edx_apt_ppa_repo
    - role: swapfile
    - role: edxlocal
    - analytics_pipeline
    - analytics_pipeline_configuration

# specific variables are configured on nau-data/envs/<env>/group_vars/idpproxy_servers.yml
- name: Configure Shibboleth IdP
  hosts: 
    - idpproxy_servers
    - idpauth_servers
  become: True
  gather_facts: True
  tags: 
    - idp
  roles:
    - role: server_files
      vars: 
        server_files: "{{ server_files_before }}"
    - shibboleth-3-4-4-centos7-lite/roles/check-system
    - shibboleth-3-4-4-centos7-lite/roles/system
    - shibboleth-3-4-4-centos7-lite/roles/httpd
    - shibboleth-3-4-4-centos7-lite/roles/tomcat
    - shibboleth-3-4-4-centos7-lite/roles/postgresql
    - shibboleth-3-4-4-centos7-lite/roles/shibboleth
    - shibboleth-3-4-4-centos7-lite/roles/shibboleth_files
    - role: shibboleth-3-4-4-centos7-lite/roles/cc-cmd
      when: install_cc_cmd is not defined or install_cc_cmd
    - shibboleth-3-4-4-centos7-lite/roles/performance
    - role: server_files
      vars: 
        server_files: "{{ server_files_after }}"

- name: Configure support server
  hosts: support_server
  become: True
  gather_facts: True
  roles:
    - role: geerlingguy.docker
    - role: docker_daemon
    - role: openark_orchestrator

- name: Install Docker and create folders used as volumes
  hosts: nau_docker_swarm_managers,nau_docker_swarm_workers
  # If you want to upgrade docker, use the next extra var so 1 node is upgraded a time
  serial: "{{ serial_number | default(omit) }}"
  become: True
  gather_facts: True
  tasks:
    - name: installs docker software
      import_role:
        name: geerlingguy.docker 
    - name: configures the docker daemon
      import_role:
        name: docker_daemon

- name: Configure 1st docker swarm manager
  hosts: nau_docker_swarm_managers[0]
  # serial: "{{ serial_number | default(1) }}"
  become: True
  gather_facts: True
  tasks:
    - name: configures the swarm
      import_role:
        name: docker_swarm
      vars:
        docker_swarm_manager: "{{ groups['nau_docker_swarm_managers'] }}"
        docker_swarm_worker: "{{ groups['nau_docker_swarm_workers'] }}"
        configure_labels: false
        # on ansible inventory each host has its IPv4 address on the `ansible_host` variable
        docker_swarm_node_advertise_addr: "{{ hostvars[inventory_hostname].ansible_host }}"

    - name: Copy multi stack healthcheck Makefile script
      template:
        src: "templates/global/Makefile"
        dest: "/nau/ops/Makefile"
      tags: global_healthcheck

    - name: Install script to send docker logs to s3
      import_role:
        name: docker_logs_to_s3
      tags: docker_logs_to_s3

- name: Configure other docker swarm nodes
  hosts: nau_docker_swarm_managers,nau_docker_swarm_workers
  become: True
  gather_facts: True
  tasks:
    - import_role:
        name: snmpd
    - import_role:
        name: snmpd_docker
    - name: configures the swarm
      import_role:
        name: docker_swarm
      vars:
        docker_swarm_manager: "{{ groups['nau_docker_swarm_managers'] }}"
        docker_swarm_worker: "{{ groups['nau_docker_swarm_workers'] }}"
        # on ansible inventory each host has its IPv4 address on the `ansible_host` variable
        docker_swarm_node_advertise_addr: "{{ hostvars[inventory_hostname].ansible_host }}"

- name: Deploy openedx stack to the 1st docker swarm manager
  hosts: nau_docker_swarm_managers,nau_docker_swarm_workers
  become: True
  gather_facts: True
  roles:
    - name: Deploy openedx stack
      role: openedx_deploy
      vars:
        openedx_deploy_run: "{{ openedx_deploy | default(false) }}"
        openedx_deploy_create_volumes: "{{ openedx_deploy | default(false) }}"
        docker_swarm_manager_to_deploy: "{{ groups['nau_docker_swarm_managers'][0] }}"
        docker_swarm_cluster_group_length: "{{ groups['nau_docker_swarm_servers'] | length }}"

    - name: Deploy staticproxy stack
      role: staticproxy_deploy
      vars:
        staticproxy_deploy_run: "{{ staticproxy_deploy | default(false) }}"
        staticproxy_deploy_create_volumes: "{{ staticproxy_deploy | default(false) }}"
        docker_swarm_manager_to_deploy: "{{ groups['nau_docker_swarm_managers'][0] }}"
        docker_swarm_cluster_group_length: "{{ groups['nau_docker_swarm_servers'] | length }}"

    - name: Deploy coursecertificate stack
      role: coursecertificate_deploy
      vars:
        coursecertificate_deploy_run: "{{ coursecertificate_deploy | default(false) }}"
        coursecertificate_deploy_create_volumes: "{{ coursecertificate_deploy | default(false) }}"
        docker_swarm_manager_to_deploy: "{{ groups['nau_docker_swarm_managers'][0] }}"
        docker_swarm_cluster_group_length: "{{ groups['nau_docker_swarm_servers'] | length }}"

    - name: Deploy richie stack
      role: richie_deploy
      vars:
        richie_deploy_run: "{{ richie_deploy | default(false) }}"
        richie_deploy_create_volumes: "{{ richie_deploy | default(false) }}"
        docker_swarm_manager_to_deploy: "{{ groups['nau_docker_swarm_managers'][0] }}"
        docker_swarm_cluster_group_length: "{{ groups['nau_docker_swarm_servers'] | length }}"
