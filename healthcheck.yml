# Playbook that checks the health of the services.
#
# 1. Check databases replication used by the open edx platform:
# - MySQL DB
# - MongoDB
# - Elasticsearch
#
# 2. Run check urls for all the web servers
#
# Ansible playbook extra variables:
# - target_mysql_server - used to check only a subrange of MySQL databases for its health
# - target_mongo_server - used to change the default Mongo database instance where to check the health of the cluster
#
# Example:
#   ansible-playbook -i nau-data/envs/development/hosts.ini healthcheck.yml
#
---
- name: Check MySQL 5.7 Database instances
  hosts: nau_docker_swarm_servers
  become: True
  gather_facts: True
  tasks:
    - name: Check lag from primary
      shell: docker exec -it -e MYSQL_PWD={{ EDXAPP_MYSQL_PASSWORD_ADMIN }} $(docker ps --filter "name={{ openedx_mysql_replica_container_name }}" {% raw %} --format "{{.ID}}" {% endraw %}) bash -c "echo 'show slave status \G;' | mysql -u root" | grep "Seconds_Behind_Master" | awk '{print $2}'
      when: openedx_mysql_replica_server == inventory_hostname
      register: mysql_output
      changed_when: false
    
    - debug:
        msg: "{{ mysql_output }}"
      when: openedx_mysql_replica_server == inventory_hostname and ansible_verbosity > 0

    - debug:
        msg: "Seconds_Behind_Master: {{ mysql_output.stdout }}"
      when: openedx_mysql_replica_server == inventory_hostname

    - name: Fail if MySQL DB instance is too much behind - fail if >= 60 seconds
      fail:
        msg: Fail MySQL DB instance is too much behind
      # it is ok if the node is behind from 0 to 9 seconds lag
      when: openedx_mysql_replica_server == inventory_hostname and mysql_output.stdout is not match("^[0-5]?[0-9]$")

- name: Check Mongo Database instances
  # we only need to run the commands on a single server, so we run by default on the first defined on the ansible
  hosts: "mongo_servers:&{{ target_mongo_server | default('mongo_servers') }}[0]"
  become: True
  gather_facts: True
  tasks:
    - name: Get MongoDB secondary nodes replication information
      shell: |
        mongo admin -u admin -p{{ MONGO_ADMIN_PASSWORD }} --host rs0/localhost --eval 'db.printSlaveReplicationInfo()' | grep "behind the primary" | awk '{print $1}' | egrep "^[0-9]$" | wc -l
      register: mongo_db_secoundary_nodes_result
      changed_when: false
      
    - name: Fail if MongoDB secondary nodes replication isn't ok
      fail:
        msg: Fail the number of healthy secondary nodes
      when: mongo_db_secoundary_nodes_result.stdout != ( (( groups['mongo_servers'] | length) -1) | string )

- name: Check URLs
  hosts: all
  become: True
  gather_facts: True
  roles:
    - nau_check_urls

- name: Check URLs on docker swarm services
  hosts: nau_docker_swarm_managers[0]
  become: True
  gather_facts: True
  vars:
    _docker_stacks: "{{ docker_stacks | default([]) }}"
  tasks:
    - name: Check urls for openedx
      import_role:
        name: openedx_deploy
      vars:
        openedx_deploy_run: false
        healthcheck: true
      tags: nau_check_urls

    - name: Check urls for staticproxy
      import_role:
        name: staticproxy_deploy
      vars:
        staticproxy_deploy_run: false
        healthcheck: true
      tags: nau_check_urls

    - name: Check urls for coursecertificate
      import_role:
        name: coursecertificate_deploy
      vars:
        coursecertificate_deploy_run: false
        healthcheck: true
      tags: nau_check_urls

    - name: Check urls for richie
      import_role:
        name: richie_deploy
      vars:
        richie_deploy_run: false
        healthcheck: true
      tags: nau_check_urls

    - name: Run healthcheck Makefile target on each stack
      shell: make --no-print-directory -C {{ item }} healthcheck
      retries: "{{ healthcheck_retries | default(3) }}"
      delay: "{{ healthcheck_delay | default(15) }}"
      register: result
      until: result.rc == 0
      when: not ansible_check_mode
      changed_when: False
      with_items: "{{ _docker_stacks }}"

- name: Check Redis docker servers healthcheck
  hosts: redis_docker_servers
  become: True
  gather_facts: True
  tasks:
    - name: Run healthcheck
      shell: make --no-print-directory -C {{ redis_docker_deploy_base_folder }} healthcheck
      retries: "{{ healthcheck_retries | default(3) }}"
      delay: "{{ healthcheck_delay | default(15) }}"
      register: result
      until: result.rc == 0
      when: not ansible_check_mode
      changed_when: False

- name: Check Mongo docker servers healthcheck
  hosts: mongo_docker_servers
  become: True
  gather_facts: True
  tasks:
    - name: Run Mongo healthcheck
      shell: make --no-print-directory -C {{ mongo_docker_deploy_base_folder }} healthcheck
      retries: "{{ healthcheck_retries | default(3) }}"
      delay: "{{ healthcheck_delay | default(15) }}"
      register: result
      until: result.rc == 0
      when: not ansible_check_mode
      changed_when: False
