# Run daily openedx tasks
#
# Examples:
# To run all run the playbook with:
#   ansible-playbook -i nau-data/envs/<env>/hosts.ini openedx_discovery_refresh_swarm.yml -e run_all=true
#
# To run specific step use:
#   ansible-playbook -i nau-data/envs/<env>/hosts.ini openedx_discovery_refresh_swarm.yml -e lms_schedules_send_course_next_section_update=true
#   ansible-playbook -i nau-data/envs/<env>/hosts.ini openedx_discovery_refresh_swarm.yml -e lms_schedules_send_course_update=true
#   ansible-playbook -i nau-data/envs/<env>/hosts.ini openedx_discovery_refresh_swarm.yml -e lms_schedules_send_recurring_nudge=true

---
- name: Run daily openedx tasks
  hosts: "nau_docker_swarm_managers[0]"
  become: True
  gather_facts: True
  vars:
    _lms_schedules_send_course_next_section_update: "{{ run_all | default(lms_schedules_send_course_next_section_update) | default(false) | bool }}"
    _lms_schedules_send_course_update:              "{{ run_all | default(lms_schedules_send_course_update)              | default(false) | bool }}"
    _lms_schedules_send_recurring_nudge:            "{{ run_all | default(lms_schedules_send_recurring_nudge)            | default(false) | bool }}"

    commands_to_execute:
      # lms tasks
      - docker_exec_name: lms schedules send_course_next_section_update
        docker_stack: openedx
        docker_service_to_exec: lms
        docker_exec_command: python manage.py lms send_course_next_section_update --settings nau_production {{ EDXAPP_LMS_BASE }}
        docker_exec_output_fact: lms_schedules_send_course_next_section_update_output
        when: "{{ _lms_schedules_send_course_next_section_update }}"
      - docker_exec_name: lms schedules send_course_update
        docker_stack: openedx
        docker_service_to_exec: lms
        docker_exec_command: python manage.py lms send_course_update --settings nau_production {{ EDXAPP_LMS_BASE }}
        docker_exec_output_fact: lms_schedules_send_course_update_output
        when: "{{ _lms_schedules_send_course_update }}"
      - docker_exec_name: lms schedules send_recurring_nudge
        docker_stack: openedx
        docker_service_to_exec: lms
        docker_exec_command: python manage.py lms send_recurring_nudge --settings nau_production {{ EDXAPP_LMS_BASE }}
        docker_exec_output_fact: lms_schedules_send_recurring_nudge_output
        when: "{{ _lms_schedules_send_recurring_nudge }}"

  tasks:
    - name: Execute discovery and lms refresh jobs
      include_role:
        name: docker_exec_in_swarm
      vars:
        docker_exec_name: "{{ exec.docker_exec_name }}"
        docker_stack: "{{ exec.docker_stack }}"
        docker_service_to_exec: "{{ exec.docker_service_to_exec }}"
        docker_exec_command: "{{ exec.docker_exec_command }}"
        docker_exec_ignore_errors: "{{ exec.docker_exec_ignore_errors | default(True) }}"
        docker_exec_output_fact: "{{ exec.docker_exec_output_fact | default(None) }}"
      when: exec.when | default(true)
      loop_control:
        loop_var: exec
        label: "Execute {{ exec.docker_exec_name }}"
      loop: "{{ commands_to_execute }}"

    # needed only because we are ignoring the errors on previous task and now we are checking if
    # each has finished with success.
    - name: Check if above commands have finished with success
      assert:
        that: hostvars[inventory_hostname][check_cmd.docker_exec_output_fact].rc == 0 and "ERROR" not in hostvars[inventory_hostname][check_cmd.docker_exec_output_fact].stdout
        quiet: true
      when: check_cmd.when | default(true)
      loop_control:
        loop_var: check_cmd
        label: Check if {{ check_cmd.docker_exec_name }} have finished with success
      loop: "{{ commands_to_execute }}"
