{% import '_docker_deploy_helper.j2' as helper with context %}
# {{ ansible_managed }}
version: "3.8"

services:
  app:
    image: {{ coursecertificate_app_docker_image }}
    ports:
      - target:    {{ coursecertificate_app_docker_port_target | default(5000) }}
        published: {{ coursecertificate_app_docker_port_published | default(5000) }}
        protocol:  tcp
        mode:      ingress
{{ helper.service_configs(service='app') }}
{{ helper.service_secrets(service='app') }}
    deploy:
      replicas: {{ coursecertificate_app_replicas }}
      placement:
        max_replicas_per_node: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 100M
      update_config:
        parallelism: 1
        failure_action: rollback
        order: start-first
    environment:
      # Use custom timezone
      TZ: {{ coursecertificate_timezone | default("Europe/Lisbon") }}
    healthcheck:
      test: ["CMD", "echo", "''", ">", "/dev/tcp/127.0.0.1/5000", "||", "exit", "1"]
      start_period: 3s
      retries: 10
      interval: 10s
      timeout: 10s

  nginx:
    image: {{ coursecertificate_nginx_image }}
    restart: always
    ports:
      - target: 80
        published: {{ coursecertificate_nginx_http_ingress_port }}
        protocol: tcp
        mode: ingress
      - target: 443
        published: {{ coursecertificate_nginx_https_ingress_port }}
        protocol: tcp
        mode: ingress
{{ helper.service_configs(service='nginx') }}
{{ helper.service_secrets(service='nginx') }}
    environment:
      # Use custom timezone
      TZ: {{ coursecertificate_timezone | default("Europe/Lisbon") }}
    extra_hosts:
      - "{{ nau_ceph_host }}:{{ nau_ceph_s3_ip }}"
    deploy:
      replicas: {{ coursecertificate_nginx_replicas }}
      mode: replicated
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 5M
      update_config:
        parallelism: 1
        failure_action: rollback
        order: start-first
      placement:
        max_replicas_per_node: 1
{% if coursecertificate_docker_placement_constraints is defined and ( coursecertificate_docker_placement_constraints | length > 0 ) %}
        constraints:
{% for key, value in coursecertificate_docker_placement_constraints.items() %}
          - {{ key }} == {{ value }}
{% endfor %}
{% endif %}
    healthcheck:
      test: ["CMD", "echo", "''", ">", "/dev/tcp/127.0.0.1/80", "&&", "echo", "''", ">", "/dev/tcp/127.0.0.1/443", "||", "exit", "1"]
      start_period: 3s
      retries: 10
      interval: 10s
      timeout: 10s

{{ helper.configs() }}
{{ helper.secrets() }}
