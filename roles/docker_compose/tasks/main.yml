---
- name: Install docker-compose
  package: 
    name: docker-compose
    state: present

- name: Create root directory
  file:
    path: "{{ image_root_dir }}"
    state: directory

- name: Install git
  package: 
    name: git
    state: present
  when: dockercompose_git_repositories is defined and ( dockercompose_git_repositories | length ) > 0

- name: Install read-only ssh key
  copy:
    dest: "{{ item.dest + 'ssh_key' }}"
    content: "{{ item.ssh_key }}"
    mode: "0600"
  no_log: True
  with_items: "{{ dockercompose_git_repositories | selectattr('ssh_key', 'defined') | list }}"
  when: dockercompose_git_repositories is defined

- name: Update git repository source code
  git: 
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
    force: "{{ item.force | default(omit) }}"
    version: "{{ item.version | default(omit) }}"
    accept_hostkey: yes
    key_file: "{{ ( item.dest + 'ssh_key' ) if item.ssh_key is defined else omit }}"
  loop_control:
    label: "{{ item.repo }}"
  with_items: "{{ dockercompose_git_repositories }}"
  when: dockercompose_git_repositories is defined
  register: dockercompose_git_repositories_out

- name: Remove read-only ssh key
  file:
    dest: "{{ item.dest + 'ssh_key' }}"
    state: absent
  no_log: True
  with_items: "{{ dockercompose_git_repositories | selectattr('ssh_key', 'defined') | list }}"
  when: dockercompose_git_repositories is defined

- name: Set permissions to git destination folders
  file:
    path: "{{ item.dest }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}" 
    mode: "{{ item.mode }}"
    recurse: yes
  loop_control:
    label: "{{ item.dest }}"
  with_items: "{{ dockercompose_git_repositories | selectattr('owner', 'defined') | list }}"
  when: dockercompose_git_repositories is defined

- name: Define fact for each git repository update
  set_fact:
    "{{ item.0.fact }}": "{{ item.1.after }}"
  loop_control:
    label: "{{ item.0.dest }}"
  when: item.0.fact is defined
  with_together:
    - "{{ dockercompose_git_repositories              | default( [] ) }}"
    - "{{ dockercompose_git_repositories_out.results  | default( [] ) }}"

- name: create context directories
  file:
    dest: "{{ item.dest | dirname }}"
    owner: "{{ item.dir_owner|default(omit) }}"
    group: "{{ item.dir_group|default(omit) }}"
    mode: "{{ item.dir_mode | default(omit) }}"
    recurse: true
    state: directory
  with_items: "{{ context_dirs }}"

- name: Copy context files
  template:
    dest: "{{ item.dest }}"
    src: "{{ item.src }}"
  with_items: "{{ context_files }}"
  register: context

- name: Copy docker-compose
  template:
    dest: "{{ image_root_dir }}/docker-compose.yml"
    src: "{{ dockercompose_template }}"
  register: dockerfile

- name: Stop docker containers and remove its volumes
  docker_service:
    project_src: "{{ image_root_dir }}"
    state: absent
    remove_volumes: true
    remove_orphans: true
  when: (dockercompose_force_restart | default(false)) or dockerfile.changed or context.changed or dockercompose_git_repositories_out.changed

- name: Start docker containers
  docker_service:
    project_src: "{{ image_root_dir }}"
    restarted: true
    pull: true # upgrade images prior to starting the application
    recreate: always
  when: (dockercompose_force_restart | default(false)) or dockerfile.changed or context.changed or dockercompose_git_repositories_out.changed
