# ansible managed, do not edit manually.

*filter
:INPUT ACCEPT [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
:Chain-ICMP - [0:0]
:Chain-SYN - [0:0]
:DOCKER - [0:0]
:DOCKER-ISOLATION-STAGE-1 - [0:0]
:DOCKER-ISOLATION-STAGE-2 - [0:0]
:DOCKER-USER - [0:0]

# Allow localhost communications
-A INPUT -i lo -j ACCEPT

# Accepth all established connections
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# Ban Abusive IPs
{%if hostvars[inventory_hostname]['nau_firewall_ban_abusive_ipv4'] is defined %}
{% for ip in hostvars[inventory_hostname]['nau_firewall_ban_abusive_ipv4'] %}
-A INPUT -s {{ ip }} -j DROP
{% endfor %}
{% endif %}

# Detect ICMP FLOOD attacks and drop them
-A INPUT -p icmp -j Chain-ICMP

# Detect TCP SYN FLOOD attacks
-A INPUT -p tcp --syn -j Chain-SYN -m comment --comment "Detect TCP SYN FLOOD attacks"

# FCCN Accesses
-A INPUT -i eth0 -s 193.136.44.0/24 -j ACCEPT -m comment --comment "Allow all from FCCN CORP "
-A INPUT -i eth0 -s 172.16.10.0/24,172.16.11.0/24 -j ACCEPT -m comment --comment "Allow all from FCCN VPN" 
-A INPUT -i eth1 -s 172.21.1.91 -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT -m comment --comment "Accept ssh connections from cnc01"

# Monitorization
-A INPUT -s 193.136.7.2 -m comment --comment "Monitorization Sirens" -j ACCEPT
-A INPUT -s 193.136.7.7 -m comment --comment "Monitorization Sirens bkp" -j ACCEPT
-A INPUT -s 10.0.5.11 -m comment --comment "Monitorization Ananda" -j ACCEPT

# Docker rules please dont edit this lines
-A FORWARD -j DOCKER-USER
-A FORWARD -j DOCKER-ISOLATION-STAGE-1
-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -o docker0 -j DOCKER
-A FORWARD -i docker0 ! -o docker0 -j ACCEPT
-A FORWARD -i docker0 -o docker0 -j ACCEPT
-A DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 443 -j ACCEPT
-A DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT
-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2
-A DOCKER-ISOLATION-STAGE-1 -j RETURN
-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP
-A DOCKER-ISOLATION-STAGE-2 -j RETURN
-A DOCKER-USER -j RETURN

# Rules to accept traffic from allowed networks
{% if (hostvars[inventory_hostname]['nau_firewall_allowed_tcp_ports'] is defined and hostvars[inventory_hostname]['nau_firewall_allowed_tcp_ports']|length>0 ) %}
{% if hostvars[inventory_hostname]['nau_firewall_allowed_all_networks'] %}
-A INPUT -m state --state NEW -m tcp -p tcp -m multiport --dports {{ nau_firewall_allowed_tcp_ports | join(',') }} -j ACCEPT -m comment --comment "Accept {{ nau_firewall_allowed_tcp_ports | join(',') }} ports traffic"
{% else %}
{% for rule in hostvars[inventory_hostname]['nau_firewall_allowed_networks_ipv4'] %}
-A INPUT -m state --state NEW -m tcp -p tcp -m multiport --dports {{ nau_firewall_allowed_tcp_ports | join(',') }} -s {{ rule.ip }} -j ACCEPT -m comment --comment "Accept {{ nau_firewall_allowed_tcp_ports | join(',') }} ports traffic from {{ rule.comment }} "
{% endfor %}

-I DOCKER-USER -j DROP -m comment --comment "Rule to DROP by default all incoming traffic to docker"
# Rules to accept traffic from allowed networks to DOCKER
{% for rule in hostvars[inventory_hostname]['nau_firewall_allowed_networks_ipv4'] %}
-I DOCKER-USER -s {{ rule.ip }} -j ACCEPT -m comment --comment "Accept from {{ rule.comment }} to DOCKER"
{% endfor %}
{% endif %}
{% endif %}

# Ban Abusive IPs
{%if hostvars[inventory_hostname]['nau_firewall_ban_abusive_ipv4'] is defined %}
{% for ip in hostvars[inventory_hostname]['nau_firewall_ban_abusive_ipv4'] %}
-I DOCKER-USER -s {{ ip }} -j DROP
{% endfor %}
{% endif %}

# Reject other traffic"
-A INPUT -m limit --limit 4/sec -j LOG --log-prefix "REJECT-UNKNOWN: " --log-level 7 --log-tcp-sequence --log-tcp-options --log-ip-options --log-uid -m comment --comment "Reject other traffic"
-A INPUT -j REJECT --reject-with icmp-host-prohibited -m comment --comment "Reject other traffic"

############
# CHAINS
############

# Detect ICMP FLOOD attacks and drop them
-A Chain-ICMP -m limit --limit 10/s --limit-burst 100 -j ACCEPT -m comment --comment "Detect ICMP FLOOD attacks and drop them"
-A Chain-ICMP -m limit --limit 4/s -j LOG --log-level 7 --log-prefix "DROP-ICMP-FLOOD: " --log-tcp-sequence --log-tcp-options --log-ip-options --log-uid -m comment --comment "Detect ICMP FLOOD attacks and drop them"
-A Chain-ICMP -j DROP -m comment --comment "Detect ICMP FLOOD attacks and drop them"

# Detect SYN FLOOD attacks and drop them
-A Chain-SYN -m limit --limit 200/s --limit-burst 200 -j RETURN -m comment --comment "Detect SYN FLOOD attacks and drop them"
-A Chain-SYN -m limit --limit 4/s -j LOG --log-level 7 --log-prefix "DROP-SYN-FLOOD: " --log-tcp-sequence --log-tcp-options --log-ip-options --log-uid -m comment --comment "Detect SYN FLOOD attacks and drop them"
-A Chain-SYN -j DROP -m comment --comment "Detect SYN FLOOD attacks and drop them"

# Custom iptables rules
{%if hostvars[inventory_hostname]['nau_firewall_custom_iptables_rules_ipv4'] is defined %}
{% for rule in hostvars[inventory_hostname]['nau_firewall_custom_iptables_rules_ipv4'] %}
{{ rule }}
{% endfor %}
{% endif %}

# Drop all other traffic.
-A INPUT -j DROP

COMMIT
