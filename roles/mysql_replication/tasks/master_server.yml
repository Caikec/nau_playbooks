---

- name: Get current server id
  mysql_variables:
    variable: server_id
  register: server_id

- name: Get current log_bin state
  mysql_variables:
    variable: log_bin
  register: log_bin

- name: Put replication configuration file
  template: 
    src: replication.cnf.j2 
    dest: /etc/mysql/mysql.conf.d/replication.cnf
  notify:
   - restart mysql
  when: server_id.msg <= 0 or log_bin.msg == 'OFF'

- name: Check slave replication status.
  mysql_replication:
    mode: getslave
  register: master_as_slave

- name: Get current log_slave_updates state
  mysql_variables:
    variable: log_slave_updates
  register: log_slave_updates
  when: master_as_slave.Is_Slave == true

- name: Put replication configuration file
  template: 
    src: log_slave_updates.cnf.j2 
    dest: /etc/mysql/mysql.conf.d/log_slave_updates.cnf
  notify:
   - restart mysql
  when: "(master_as_slave.Is_Slave == true) and (log_slave_updates.msg == OFF)"

- name: Stop slave
  mysql_replication:
    mode: stopslave
  when: master_as_slave.Is_Slave == true

- name: Create replication user
  mysql_user:
    name: "{{ EDXAPP_MYSQL_REPLICATION_USER }}"
    password: "{{ EDXAPP_MYSQL_REPLICATION_PASSWORD }}"
    priv: '*.*:ALL'
    host: "{{ EDXAPP_MYSQL_REPLICATION_SLAVE_SERVER_IP }}"
    state: present

- name: Run manually mysql command in master server to lock tables
  pause:
    prompt: "Please run manually in the master server the following command $mysql> FLUSH TABLES WITH READ LOCK;"
    echo: yes

- name: Check master replication status.
  mysql_replication:
    mode: getmaster
  register: master

- name: Create datasnapshot
  mysql_db:
    state: dump
    name: all
    target: /tmp/{{ REPLICATION_DUMP_FILE_NAME }}.sql

- name: Copy datasnapshot to localhost
  synchronize: 
    src: "/tmp/{{ REPLICATION_DUMP_FILE_NAME }}.sql"
    dest: "/tmp/{{ REPLICATION_DUMP_FILE_NAME }}.sql"
    mode: pull

- name: Remove datasnapshot in master server
  file:
    dest: "/tmp/{{ REPLICATION_DUMP_FILE_NAME }}.sql"
    state: absent
