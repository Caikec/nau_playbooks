---
- name: Create folders volumes for openedx stack
  file:
    dest: "{{ item.dest | dirname }}"
    owner: "{{ item.dir_owner|default(omit) }}"
    group: "{{ item.dir_group|default(omit) }}"
    mode: "{{ item.dir_mode | default(omit) }}"
    recurse: true
    state: directory
  when: (openedx_deploy_create_volumes | default(false)) and (item.when | default(true) | bool)
  loop_control:
    label: "{{ item.dest }}"
  loop: "{{ openedx_docker_deploy_folders_additional }}"
  tags:
    - docker_deploy

- name: Generate basic-authentication
  include_role:
    name: basic-authentication
  vars:
    basic_authentication_users: "{{ openedx_nginx_basic_authentication_users }}"
  when: docker_swarm_manager_to_deploy is defined and docker_swarm_manager_to_deploy == inventory_hostname and openedx_deploy_run | default(false) and openedx_nginx_basic_authentication_users is defined
  tags:
    - docker_deploy

- name: Configure sysctl.conf
  lineinfile: dest=/etc/sysctl.conf line="{{ item.key }} = {{ item.value }}" regexp="^{{ item.key }}[\s]?=" state=present
  with_dict: "{{ openedx_sysctl_conf }}"
  when: openedx_deploy_run | default(false)
  notify: reload sysctl
  tags:
    - docker_deploy

- name: Install MySQL client for health check
  package:
    name: mysql-client
  when: docker_swarm_manager_to_deploy is defined and docker_swarm_manager_to_deploy == inventory_hostname and openedx_deploy_run | default(false)
  tags:
    - docker_deploy

- name: Build web server nginx docker image with all previous(current) and next release static assets
  include_role:
    name: docker_swarm_build_web_server
  vars:
    docker_swarm_build_web_server_stack_name: "{{ openedx_docker_deploy_stack_name }}"
    docker_swarm_build_web_server_docker_repository: "{{ openedx_docker_swarm_build_web_server_docker_repository }}"
    docker_swarm_build_web_server_docker_image: "{{ openedx_docker_swarm_build_web_server_docker_image }}"
    docker_swarm_build_web_server_docker_swarm_service: "{{ openedx_docker_swarm_build_web_server_docker_swarm_service }}"
    docker_swarm_build_web_server_docker_image_with_hash_fact_name: "{{ openedx_docker_swarm_build_web_server_docker_image_with_hash_fact_name }}"
    docker_swarm_build_web_server_services: "{{ openedx_docker_swarm_build_web_server_services }}"
    docker_swarm_build_web_server_deploy: "{{ openedx_deploy_run | default(false) | bool }}"
    docker_swarm_build_web_server_build: "{{ openedx_nginx_build | bool }}"
  when: docker_swarm_manager_to_deploy is defined and docker_swarm_manager_to_deploy == inventory_hostname
  tags:
    - docker_swarm_build_web_server
    - docker_deploy

- name: Prefetch docker images
  docker_image:
    name: "{{ docker_image }}"
    source: pull
  # Prefetch image to docker swarm nodes that aren't on drain mode
  when: openedx_deploy_run | default(false) and ( hostvars[inventory_hostname].docker_swarm_node_availability | default('') ) != 'drain'
  loop_control:
    loop_var: docker_image
    label: "Pulling docker image: {{ docker_image }}"
  loop: "{{ openedx_docker_images_to_prefetch }}"
  tags:
    - docker_deploy

- name: Deploy
  include_role:
    name: ansible-docker-deploy
  vars:
    docker_deploy_stack_name:          "{{ openedx_docker_deploy_stack_name }}"
    docker_deploy_stack_template:      "{{ openedx_docker_deploy_stack_template }}"
    docker_deploy_base_folder:         "{{ openedx_docker_deploy_base_folder }}"
    docker_deploy_templates:           "{{ openedx_docker_deploy_templates | default([]) }}"
    docker_deploy_files:               "{{ openedx_docker_deploy_files | default([]) }}"
    docker_deploy_folders_additional:  "{{ openedx_docker_deploy_folders_additional | default([]) }}"
    docker_deploy_configs:             "{{ openedx_docker_deploy_configs | default([]) }}"
    docker_deploy_secrets:             "{{ openedx_docker_deploy_secrets | default([]) }}"
    docker_deploy_services_additional: "{{ openedx_docker_deploy_services_additional | default([]) }}"
    docker_deploy_stack_prune:         "{{ openedx_docker_deploy_stack_prune }}"
    docker_deploy_stack_verify_retries: "{{ openedx_docker_deploy_stack_verify_retries }}"
    docker_deploy_stack_verify_delay:  "{{ openedx_docker_deploy_stack_verify_delay }}"
  when: docker_swarm_manager_to_deploy is defined and docker_swarm_manager_to_deploy == inventory_hostname and openedx_deploy_run | default(false)
  tags:
    - docker_deploy

- name: Run healthcheck
  shell: make healthcheck
  args:
    chdir: "{{ openedx_docker_deploy_base_folder }}"
  delay: "{{ openedx_docker_deploy_stack_verify_delay }}"
  register: result
  until: result.rc == 0
  retries: "{{ openedx_docker_deploy_stack_verify_retries }}"
  # run it only when deploying or when on healthcheck mode.
  when: docker_swarm_manager_to_deploy is defined and docker_swarm_manager_to_deploy == inventory_hostname and not ansible_check_mode and (openedx_deploy_run | default(false)) or (healthcheck | default(false))
  changed_when: False
  tags: 
    - healthcheck
    - docker_deploy

- name: Check URLs
  include_role:
    name: nau_check_urls
  vars:
    nau_urls_to_check: "{{ openedx_nau_urls_to_check }}"
  when: docker_swarm_manager_to_deploy is defined and docker_swarm_manager_to_deploy == inventory_hostname and (openedx_deploy_run | default(false)) or (healthcheck | default(false))
  tags:
    - docker_deploy
    - nau_check_urls

- name: Initialize openedx MySQL databases replication
  include_role:
    name: docker_mysql_replication
  when: openedx_mysql_initialization | default(False)
  vars:
    # The replication mysql files are templated using the ansible-docker-deploy role instead of docker_mysql_replication role
    docker_mysql_replication_template: false
    # dict with docker containers configuration
    docker_mysql_replication_containers: "{{ openedx_mysql_containers }}"
    docker_mysql_replication_additional_databases: "{{ openedx_docker_mysql_replication_additional_databases }}"
    docker_mysql_replication_additional_users: "{{ openedx_docker_mysql_replication_additional_users }}"
    docker_mysql_replication_containers_prefix: openedx
  tags:
    - docker_deploy
    - docker_mysql_replication
    - docker_mysql_replication_additional
    - docker_mysql_replication_additional_databases
    - docker_mysql_replication_additional_users
