{% import '_docker_deploy_helper.j2' as helper with context %}
# {{ ansible_managed }}
version: "3.8"

services:
  mysql_lb_haproxy:
    image: {{ openedx_mysql_lb_haproxy_docker_image | default('haproxy:2.4.16') }}
    ports:
      # write
      - target:    {{ openedx_mysql_lb_haproxy_write_port | default(3306) }}
        published: {{ openedx_mysql_lb_haproxy_write_port | default(3306) }}
        protocol:  tcp
        mode:      ingress
      # read
      - target:    {{ openedx_mysql_lb_haproxy_readonly_port | default(3307) }}
        published: {{ openedx_mysql_lb_haproxy_readonly_port | default(3307) }}
        protocol:  tcp
        mode:      ingress
      # statistics
      - target:    {{ openedx_mysql_lb_haproxy_statistics_port | default(1936) }}
        published: {{ openedx_mysql_lb_haproxy_statistics_port | default(1936) }}
        protocol:  tcp
        # each container have a statistics page but we should view only one on each host
        mode:      host
{{ helper.service_configs(service='mysql_lb_haproxy') }}
{{ helper.service_secrets(service='mysql_lb_haproxy') }}
    deploy:
      replicas: {{ openedx_mysql_lb_haproxy_deploy_replicas_count | default(2) }}
      placement:
        max_replicas_per_node: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 4G
      # we can't start-first because we have statistics port using host mode
      # nevertheless because still can have this because we have at least 2 replicas 
      # and we are deploy only one each time
      update_config:
        parallelism: 1
        failure_action: rollback
        order: stop-first
    healthcheck:
      test: ["CMD", "echo", "''", ">", "/dev/tcp/example.com/{{ openedx_mysql_lb_haproxy_write_port | default(3306) }}", "&&", "echo", "''", ">", "/dev/tcp/example.com/{{ openedx_mysql_lb_haproxy_readonly_port | default(3306) }}", "||", "exit", "1"]
      start_period: 3s
      retries: 10
      interval: 10s
      timeout: 10s

{% for mysql_container_name, mysql_container in openedx_mysql_containers.items() %}

  {{ mysql_container_name }}:
    image: {{ openedx_mysql_docker_image | default("docker.io/mysql:5.7.37-debian") }}
    hostname: {{ mysql_container.hostname }}
    environment:
      MYSQL_DATABASE: "{{ EDXAPP_MYSQL_DB_NAME }}"
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql-root-password
{{ helper.service_configs(service=mysql_container_name) }}
{{ helper.service_secrets(service=mysql_container_name) }}
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping --silent -p{{ EDXAPP_MYSQL_PASSWORD_ADMIN }} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 30
      start_period: 10s
    volumes:
      - {{ mysql_container.data }}:/var/lib/mysql
    ports:
      # In future after the migration of everything to swarm, limit this connection to localhost
      # example with: "127.0.0.1:3306:3306"
      - target: 3306
        published: {{ mysql_container.ingress_port }}
        protocol: tcp
        mode: ingress
    deploy:
      replicas: 1
      mode: replicated
      placement:
        max_replicas_per_node: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 4G
      placement:
        constraints:
          - node.labels.fqdn == {{ mysql_container.host_fqdn }}
{% endfor %}

{{ helper.configs() }}
{{ helper.secrets() }}
