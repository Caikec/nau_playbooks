# {{ ansible_managed }}

global
    log stdout format raw daemon            # send everything to stdout
    log stderr format raw daemon notice     # send important events to stderr
    # allows to reload the HAProxy configuration without needing to restart the container itself
    master-worker

defaults
    option  dontlognull
    timeout connect 5s
    
    # By default linux kernel send keep-alive packages only after a connection is idle for more
    # than 2 hours, so we increase the haproxy client timeout to 3 hours and enable the sending
    # of TCP keepalive packets on the client side. We are enabling this feature to all listen and
    # frontends bellow because this HAProxy instance is to be used inside the backend services.
    # If this is going to be used by browser clients we should use lower client timeout.
    #   cat /proc/sys/net/ipv4/tcp_keepalive_time
    # https://serverfault.com/questions/589804/haproxy-configuration-for-rabbitmq/652326#652326
    timeout client  3h
    option  clitcpka # Enable or disable the sending of TCP keepalive packets on the client side

    timeout server  3h

    timeout check   10s
    option  redispatch
    option  http-server-close

    # never fail on address resolution
    default-server init-addr last,libc,none

    log global


# If the MySQL containers restarts then its IP address whould change.
# The HAProxy by default does not resolve the DNS again until a restart.
# To fix this we need to specify the next `resolvers` HaProxy configuration and use the `resolvers`
# on the server line.
resolvers docker_resolver
    # Adds all nameservers found in /etc/resolv.conf to this resolvers nameservers list
    parse-resolv-conf
    resolve_retries 3
    timeout resolve 1s
    timeout retry   1s
    hold other      10s
    hold refused    10s
    hold nx         10s
    hold timeout    10s
    hold valid      10s
    hold obsolete   10s

# haproxy statistics page
frontend stats
    bind *:{{ openedx_haproxy_statistics_port | default(1936) }}
    mode http
    stats enable
    stats uri / # show stats on homepage
    stats refresh 60s

{% for mysql_container_name, mysql_container in openedx_mysql_containers.items() %}
# Not a real balancing, just a method to publish an ingress port to a container that is configured using dnsrr
listen {{ mysql_container_name }}
    bind *:{{ mysql_container.outside_port }}
    mode tcp
    server {{ mysql_container_name }} {{ mysql_container.hostname }}:3306 resolvers docker_resolver

{% endfor %}

# Primary port for writes and reads
# Uses primary servers and only if not available uses the secondary
listen mysql_haproxy_write
    bind *:{{ openedx_haproxy_write_port | default(3306) }}
    mode tcp
    option mysql-check user {{ openedx_haproxy_health_check_user }}
{% for mysql_container_name, mysql_container in openedx_mysql_containers.items() %}
    server {{ mysql_container_name }} {{ mysql_container.hostname }}:3306 check on-marked-down shutdown-sessions on-marked-up shutdown-backup-sessions inter 10s fastinter 5s downinter 2s resolvers docker_resolver {{ "backup" if not mysql_container.primary else "" }}
{% endfor %}

# Secondary por only for reads
# Uses secondary/replica server by default, if not available uses the primary
listen mysql_haproxy_readonly
    bind *:{{ openedx_haproxy_readonly_port | default(3307) }}
    mode tcp
    option mysql-check user {{ openedx_haproxy_health_check_user }}
{% for mysql_container_name, mysql_container in openedx_mysql_containers.items() %}
    server {{ mysql_container_name }} {{ mysql_container.hostname }}:3306 check on-marked-down shutdown-sessions on-marked-up shutdown-backup-sessions inter 10s fastinter 5s downinter 2s resolvers docker_resolver {{ "backup" if mysql_container.primary else "" }}
{% endfor %}

# Connects to any elasticsearch node server
listen elasticsearch
    bind *:9200
    mode http
{% for container, config in openedx_elasticsearch_containers.items() %}
    server {{ container }} {{ openedx_docker_deploy_stack_name }}_{{ container }}:9200 check on-marked-down shutdown-sessions on-marked-up shutdown-backup-sessions inter 10s fastinter 5s downinter 2s resolvers docker_resolver
{% endfor %}


# Redis advanced monitoring and balancing.
# Redirect the redis connections only for the redis master instance
# that it self announces as it is the master, but for consistency
# proposes we also check the 3 redis sentinel instances. At least 2
# redis sentinel instances must agree that who is the master.
# The system can take at least 6 minutes to change to other master.

{% for redis_container, config in openedx_redis_containers.items() %}
# Check sentinel's to see if they think {{ openedx_docker_deploy_stack_name }}_{{ redis_container }} is the redis master
backend check_master_{{ openedx_docker_deploy_stack_name }}_{{ redis_container }}
    mode tcp
    option tcp-check
    tcp-check connect
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    tcp-check send SENTINEL\ master\ mymaster\r\n
    # requires that redis sentinel announce hostnames and redis announce the hostname on the replica ip
    tcp-check expect string {{ openedx_docker_deploy_stack_name }}_{{ redis_container }}
    tcp-check send QUIT\r\n
    tcp-check expect string +OK

    # autoscaling redis sentinel to use up to {{ openedx_redis_sentinel_replicas * 3 }} instances registered on the docker dns
    server-template {{ openedx_docker_deploy_stack_name }}_redis-sentinel {{ openedx_redis_sentinel_replicas * 3 }} {{ openedx_docker_deploy_stack_name }}_redis-sentinel:26379 check inter 2s resolvers docker_resolver

{% endfor %}

# Decide redis backend to use
frontend ft_redis
    bind *:6379
    mode tcp
    # acl network_allowed src 10.10.0.0/16
    # tcp-request connection reject if !network_allowed
    # timeout connect 5s
    # timeout server 15s
    # timeout client 15s
    use_backend bk_redis

# Check all redis servers to see if they think they are master
# and also check if at least 2 the redis sentinel agree who is the master
backend bk_redis
    mode tcp
    option tcp-check
    tcp-check connect
    #uncomment these lines if you have basic auth
    # tcp-check send AUTH\ MYPASSWORD\r\n
    # tcp-check expect string +OK
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    tcp-check send info\ replication\r\n
    tcp-check expect string role:master
    tcp-check send QUIT\r\n
    tcp-check expect string +OK

{% for redis_container, config in openedx_redis_containers.items() %}
    use-server {{ openedx_docker_deploy_stack_name }}_{{ redis_container }} if { srv_is_up({{ openedx_docker_deploy_stack_name }}_{{ redis_container }}) } { nbsrv(check_master_{{ openedx_docker_deploy_stack_name }}_{{ redis_container }}) ge {{ ( ( openedx_redis_sentinel_replicas / 2 ) | int ) +1 }} }
    server {{ openedx_docker_deploy_stack_name }}_{{ redis_container }} {{ openedx_docker_deploy_stack_name }}_{{ redis_container }}:6379 check inter 2s resolvers docker_resolver
{% endfor %}
