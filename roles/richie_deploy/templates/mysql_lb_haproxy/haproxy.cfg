# {{ ansible_managed }}

global
    log stdout format raw daemon            # send everything to stdout
    log stderr format raw daemon notice     # send important events to stderr

defaults
    option  dontlognull
    timeout connect 5000ms
    timeout client  50000ms
    timeout server  50000ms
    timeout check   10s
    option  redispatch
    option  http-server-close

# If the MySQL containers restarts then its IP address whould change.
# The HAProxy by default does not resolve the DNS again until a restart.
# To fix this we need to specify the next `resolvers` HaProxy configuration and use the `resolvers`
# on the server line.
resolvers docker_resolver
    # Adds all nameservers found in /etc/resolv.conf to this resolvers nameservers list
    parse-resolv-conf

# haproxy statistics page
frontend stats
    bind *:{{ richie_mysql_lb_haproxy_statistics_port }}
    mode http
    stats enable
    stats uri / # show stats on homepage
    stats refresh 60s

# Primary port for writes and reads
# Uses primary servers and only if not available uses the secondary
listen mysql_haproxy_write
    bind *:{{ richie_mysql_lb_haproxy_write_port | default(3306) }}
    mode tcp
    option mysql-check user {{ richie_mysql_lb_haproxy_health_check_user }}
{% for mysql_container_name, mysql_container in richie_mysql_containers.items() %}
    server {{ mysql_container_name }} {{ mysql_container.hostname }}:3306 check on-marked-down shutdown-sessions on-marked-up shutdown-backup-sessions inter 10s fastinter 5s downinter 2s resolvers docker_resolver {{ "backup" if not mysql_container.primary else "" }}
{% endfor %}

# Secondary por only for reads
# Uses secondary/replica server by default, if not available uses the primary
listen mysql_haproxy_readonly
    bind *:{{ richie_mysql_lb_haproxy_readonly_port | default(3307) }}
    mode tcp
    option mysql-check user {{ richie_mysql_lb_haproxy_health_check_user }}
{% for mysql_container_name, mysql_container in richie_mysql_containers.items() %}
    server {{ mysql_container_name }} {{ mysql_container.hostname }}:3306 check on-marked-down shutdown-sessions on-marked-up shutdown-backup-sessions inter 10s fastinter 5s downinter 2s resolvers docker_resolver {{ "backup" if mysql_container.primary else "" }}
{% endfor %}

# For now the RichieCMS only supports an elastic search service hostname. It needs to be changed/fixed 
# to allow Richie to connect to multiple elastic search hostnames, like to connect directly to each elastic search cluster nodes.
# So the solution for now is to use the Richie HAProxy load balancer to balance the connections to elasticsearch cluster.
listen elasticsearch
    bind *:9200
    mode http
{% for container, config in richie_elasticsearch_containers.items() %}
    server {{ container }} {{ richie_docker_deploy_stack_name }}_{{ container }}:9200 check on-marked-down shutdown-sessions on-marked-up shutdown-backup-sessions inter 10s fastinter 5s downinter 2s resolvers docker_resolver
{% endfor %}
