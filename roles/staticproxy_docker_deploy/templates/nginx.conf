worker_processes 1;

events { worker_connections 1024; }

http {

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format compression '$http_x_forwarded_for - $remote_addr - $remote_user [$time_local]  '
        '"$request" $status $body_bytes_sent $request_time '
        '"$http_referer" "$http_user_agent"';

    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript
               text/xml application/xml application/xml+rss text/javascript;

{% if staticproxy_nginx_enable_https %}
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA:AES256-SHA:AES128-SHA256:AES256-SHA256:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:DES-CBC3-SHA;
    ssl_ecdh_curve X25519:prime256v1:secp521r1:secp384r1;
    keepalive_timeout 300s;
    ssl_session_tickets off;
    ssl_prefer_server_ciphers on;

    # SSL intermediate configuration from https://mozilla.github.io/server-side-tls/ssl-config-generator/
    ssl_certificate {{ staticproxy_nginx_docker_ssl_certificate_crt }};
    ssl_certificate_key {{ staticproxy_nginx_docker_ssl_certificate_key }};
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
{% endif %}

    # the domains used are too long
    server_names_hash_bucket_size 128;

    client_max_body_size 300M;

{% for server in staticproxy_nginx_servers %}

    server {
        server_name {{ server.name }};
        listen 80 {{ ' http2' if ( server.http2 | default(false)) or staticproxy_nginx_http2 else ''}};
{% if staticproxy_nginx_enable_https %}
        listen 443 ssl {{ ' proxy_protocol' if ( server.proxy_protocol | default(false)) or staticproxy_nginx_proxy_protocol else ''}}{{ ' http2' if ( server.http2 | default(false)) or staticproxy_nginx_http2 else ''}};
{% if server.ssl_certificate is defined %}

        ssl_certificate {{ server.ssl_certificate }};
{% endif %}
{% if server.ssl_certificate_key is defined %}
        ssl_certificate_key {{ server.ssl_certificate_key }};
{% endif %}
{% endif %}

{% if ( server.ssl_certificate is defined ) %}
        add_header Strict-Transport-Security "max-age={{ staticproxy_nginx_hsts_max_age }}; includeSubDomains; preload" always;
{% endif %}
        add_header X-Backend-Server $hostname always;

        access_log /var/log/nginx/access.log compression;

{% if staticproxy_nginx_proxy_protocol and staticproxy_nginx_admin_access_trusted_ip_cidrs is defined %}
        set_real_ip_from {{ staticproxy_nginx_admin_access_trusted_ip_cidrs }};
        real_ip_header proxy_protocol;
{% endif %}

{% if nginx_force_https %}
        # force TLS
        if ($scheme = http) {
            return 301 https://$server_name$request_uri;
        }
    {% endif %}

        location / {
            proxy_pass         {{ server.proxy_pass }};
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            proxy_redirect     off;
            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_set_header   X-Forwarded-Port 443;
            proxy_hide_header  x-amz-meta-s3cmd-attrs;
        }
    }

{% endfor %}

    # server to monitor nginx
    server {
        listen {{ NAU_NGINX_STATUS_SERVER_PORT | default('80') }};
        server_name {{ NAU_NGINX_STATUS_SERVER_NAME | default('nginx_status_server') }};
        location /nginx_status {
            stub_status on;
            access_log off;
        }
    }

}
