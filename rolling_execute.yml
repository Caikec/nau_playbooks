# Playbook that executes a shell command using a rolling restart approach.
# This can be useful to apply a rolling docker restart or to download/pull a new docker image.
#
# Example:
#   ansible-playbook -i nau-data/envs/<env>/hosts.ini rolling_execute.yml --limit <group> -e command='ls /tmp'
#
# Example that executes multiple commands:
#   ansible-playbook -i nau-data/envs/<env>/hosts.ini rolling_execute.yml --limit openedx_docker_servers -e "command='docker pull overhangio/openedx-forum:14.0.0 && docker pull overhangio/openedx-notes:14.0.1 && docker pull overhangio/openedx-discovery:14.0.2 && docker pull nauedu/openedx-analytics-data-api:nau-nutmeg.master-XXXXXX-build-yy && docker pull nauedu/openedx-insights:nau-nutmeg.master-XXXXX-build-yy && docker pull nauedu/openedx:nau-nutmeg.master-build-XXX-YYYYYYY'"
---
- hosts: all
  serial: "{{ serial_number | default(1) }}"
  become: True
  gather_facts: True
  vars:
    rolling_deploy_enabled: true
  tasks:
    - name: Lower keepalived priority to force VIP swap
      import_role:
        name: keepalived
      vars:
        keepalived_priority_override: 1
      when: keepalived_vrrp_instances is defined and ( keepalived_vrrp_instances|length > 0 )
    
    - name: force all notified handlers to run at this point
      meta: flush_handlers
    
    - name: Start rolling deploy - block load balancer connections
      import_role:
        name: rolling_deploy
      when: rolling_deploy_enabled | bool
      vars:
        rolling_deploy_docker: true
        rolling_deploy_starting: true

    - name: Print stdout of command output
      debug:
        msg: "Executing command: {{ command }}"

    # Real execute the command
    - name: Real execute command
      shell: "{{ command }}"
      register: exec_output

    - name: Print stdout of command output
      debug:
        msg: "{{ exec_output.stdout_lines }}"
      when: exec_output is defined and exec_output.stdout_lines is defined

    - name: Print stderr of command output
      debug:
        msg: "{{ exec_output.stderr_lines }}"
      when: exec_output is defined and exec_output.stderr_lines is defined

    - name: Run Makefile healthcheck
      shell: make --jobs 20 --no-print-directory --directory {{ item }} healthcheck
      retries: "{{ healthcheck_retries | default(50) }}"
      delay: "{{ healthcheck_delay | default(30) }}"
      register: result
      until: result.rc == 0
      check_mode: no # execute even when ansible is run with --check
      when: makefile_healthcheck is defined
      changed_when: False
      with_items: "{{ makefile_healthcheck }}"

    - import_role:
        name: nau_check_urls

    - name: End rolling deploy - open load balancer connections
      import_role:
        name: rolling_deploy
      vars:
        rolling_deploy_docker: true
        rolling_deploy_starting: false
      when: rolling_deploy_enabled | bool

    - name: Restore keepalived priority
      import_role:
        name: keepalived
      vars:
        keepalived_priority_override: ""
      when: keepalived_vrrp_instances is defined and ( keepalived_vrrp_instances|length > 0 )
